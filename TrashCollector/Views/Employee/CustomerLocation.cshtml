@model TrashCollector.Models.Customer
@{
    ViewBag.Title = "Customer Location";
}

<style>
    /* Set the size of the div element that contains the map */
    #map {
        height: 400px; /* The height is 400 pixels */
        width: 100%; /* The width is the width of the web page */
    }
</style>

<h2>Customer Location</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <h4> Enter in customer to find location </h4>
        <hr />

        <div class="form-group">
            @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <hr />
}

<div id="map"></div>
<script>
    // Initialize and add the map
    function initMap() {
        var obj = @Html.Raw(Json.Encode(Model));
        const Http = new XMLHttpRequest();
        const url = 'https://maps.googleapis.com/maps/api/geocode/json?key='+@ViewBag.Key;
        Http.open("GET", url, false);
        Http.send();

        // The location of Uluru
        var uluru = { lat: 42.57387, lng: -87.892213 };
        // The map, centered at Uluru
        var map = new google.maps.Map(
            document.getElementById('map'), { zoom: 4, center: uluru });
        // The marker, positioned at Uluru
        var marker = new google.maps.Marker({ position: uluru, map: map });
    }
</script>
<!--Load the API from the specified URL
* The async attribute allows the browser to render the page while the API loads
* The key parameter will contain your own API key (which is not needed for this tutorial)
* The callback parameter executes the initMap() function
-->